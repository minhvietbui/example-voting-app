pipeline{
  agent none
  stages{
    stage('Install'){
      agent{
        docker{
          image 'python:3.7.7-alpine3.11'
          args '--user root'
        }
      }
      when{
        changeset '**/vote/**'
      }
      steps{
        echo 'Intall package'
        dir('vote'){
          sh 'pip install -r requirements.txt'
        }
      }
    }
    stage('Unit test'){
      agent{
        docker{
          image 'python:3.7.7-alpine3.11'
          args '--user root'
        }
      }
      when{
        changeset '**/vote/**'
      }
      steps{
        dir('vote'){
          echo 'Unit test'
          sh 'pip install -r requirements.txt'
          sh 'nosetests -v'
        }
      }
    }
    stage('Push Image docker'){
      agent any
      when{
        branch 'master'
        changeset '**/vote/**'
      }
      steps{
        echo "Push image vote to registry docker"
        script{
          docker.withRegistry('https://index.docker.io/v1/', 'dockerlogin'){
            def resultImage = docker.build("minhviet/vote:v${env.BUILD_ID}", "./vote/")
            resultImage.push()
            resultImage.push("${env.BRANCH_NAME}")
          }
        }
      }
    }
    stage('deploy to dev'){
      agent any
      when{
        branch 'master'
      }
      steps{
        echo 'Deploy instavote app with docker compose'
        sh '/usr/local/bin/docker-compose up -d --force-recreate --renew-anon-volumes'
      }
    }
  }
  post{
    always{
      echo 'Pipeline for vote is completed'
    }
    failure{
      slackSend (channel: "general", message: "Build failed- ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
    }
    success{
      slackSend (channel: "general", message: "Build successed- ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
    }
  }
}