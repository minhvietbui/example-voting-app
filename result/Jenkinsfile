pipeline{
  agent none
  stages{
    stage('Build'){
      agent{
        docker{
          image 'node:12.18.1-alpine3.9'
        }
      }
      when{
        changeset "**/result/**"
      }
      steps{
        echo "Compile result app"
        dir('result'){
          sh 'npm install'
        }   
      }
    }
    stage('Test'){
      agent{
        docker{
          image 'node:12.18.1-alpine3.9'
        }
      }
      when{
        changeset "**/result/**"
      }
      steps{
        echo "Running unit test on result app"
        dir('result'){
          sh 'npm install'
          sh 'npm test'
        }     
      }
    }
    stage('Push Image docker'){
      agent any
      when{
        branch 'master'
        changeset '**/result/**'
      }
      steps{
        echo "Push image result to registry docker"
        script{
          docker.withRegistry('https://index.docker.io/v1/', 'dockerlogin'){
            def resultImage = docker.build("minhviet/result:v${env.BUILD_ID}", "./result/")
            resultImage.push()
            resultImage.push("${env.BRANCH_NAME}")
          }
        }
      }
    }
    stage('deploy to dev'){
      agent any
      when{
        branch 'master'
      }
      steps{
        echo 'Deploy instavote app with docker compose'
        sh '/usr/local/bin/docker-compose down -v --rmi all'
        sh '/usr/local/bin/docker-compose up -d'
      }
    }
  }
  post{
    always{
      echo 'Pipeline for result is completed'
    }
    failure{
      slackSend (channel: "general", message: "Build failed- ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
    }
    success{
      slackSend (channel: "general", message: "Build successed- ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
    }
  }
}